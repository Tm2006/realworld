package api

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/tim2006/realworld/private/types"
)

type Tags struct {
}

func (t Tags) Routes(r chi.Router) {
	r.Get("/", t.List)
}

// List –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
func (t *Tags) List(w http.ResponseWriter, r *http.Request) {
	log.Println("üè∑Ô∏è GET /api/tags - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤")

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
	tags := []string{
		"dragons",
		"training",
		"golang",
		"programming",
		"javascript",
		"react",
		"nodejs",
		"frontend",
		"backend",
		"fullstack",
		"api",
		"database",
		"tutorial",
		"beginner",
		"advanced",
	}

	response := types.TagsResponse{
		Tags: tags,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ %d —Ç–µ–≥–æ–≤", len(tags))
}
