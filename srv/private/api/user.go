package api

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/tim2006/realworld/private/types"
)

type User struct {
	DB interface{} // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º interface{}, –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º *sql.DB
}

func (u User) Routes(r chi.Router) {
	r.Post("/", u.Register)   // POST /api/users - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
	r.Post("/login", u.Login) // POST /api/users/login - –≤—Ö–æ–¥
	r.Get("/", u.Get)         // GET /api/user - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	r.Put("/", u.Put)         // PUT /api/user - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
}

// Register —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (u *User) Register(w http.ResponseWriter, r *http.Request) {
	log.Println("üìù POST /api/users - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

	var regRequest types.UserRegisterRequest

	// –ü–∞—Ä—Å–∏–º JSON –∏–∑ body
	if err := json.NewDecoder(r.Body).Decode(&regRequest); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)

		errorResponse := types.ErrorResponse{
			Errors: map[string][]string{
				"body": {"–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON"},
			},
		}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è
	if regRequest.User.Username == "" {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusUnprocessableEntity)

		errorResponse := types.ErrorResponse{
			Errors: map[string][]string{
				"username": {"–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"},
			},
		}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	if regRequest.User.Email == "" {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusUnprocessableEntity)

		errorResponse := types.ErrorResponse{
			Errors: map[string][]string{
				"email": {"–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"},
			},
		}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	if regRequest.User.Password == "" {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusUnprocessableEntity)

		errorResponse := types.ErrorResponse{
			Errors: map[string][]string{
				"password": {"–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"},
			},
		}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// TODO: –•–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å —Å bcrypt
	// TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	// TODO: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JWT —Ç–æ–∫–µ–Ω

	// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –æ—Ç–≤–µ—Ç
	user := types.UserWithToken{
		ID:       1,
		Email:    regRequest.User.Email,
		Username: regRequest.User.Username,
		Bio:      "",
		Image:    "",
		Token:    "jwt.token.here", // TODO: —Ä–µ–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
	}

	response := types.UserAuthResponse{
		User: user,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: %s", user.Username)
}

// Login –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (u *User) Login(w http.ResponseWriter, r *http.Request) {
	log.Println("üîê POST /api/users/login - –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

	var loginRequest types.UserLoginRequest

	// –ü–∞—Ä—Å–∏–º JSON –∏–∑ body
	if err := json.NewDecoder(r.Body).Decode(&loginRequest); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)

		errorResponse := types.ErrorResponse{
			Errors: map[string][]string{
				"body": {"–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON"},
			},
		}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è
	if loginRequest.User.Email == "" {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusUnprocessableEntity)

		errorResponse := types.ErrorResponse{
			Errors: map[string][]string{
				"email": {"–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"},
			},
		}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	if loginRequest.User.Password == "" {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusUnprocessableEntity)

		errorResponse := types.ErrorResponse{
			Errors: map[string][]string{
				"password": {"–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"},
			},
		}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// TODO: –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ email
	// TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é bcrypt
	// TODO: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JWT —Ç–æ–∫–µ–Ω

	// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –æ—Ç–≤–µ—Ç
	user := types.UserWithToken{
		ID:       1,
		Email:    loginRequest.User.Email,
		Username: "demo",
		Bio:      "Demo user",
		Image:    "https://api.realworld.io/images/demo-avatar.png",
		Token:    "jwt.token.here", // TODO: —Ä–µ–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
	}

	response := types.UserAuthResponse{
		User: user,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª: %s", user.Username)
}

// Get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
func (u *User) Get(w http.ResponseWriter, r *http.Request) {
	log.Println("üì• GET /api/user - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

	// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := types.User{
		ID:       1,
		Email:    "demo@realworld.io",
		Username: "demo",
		Bio:      "Demo user for RealWorld API",
		Image:    "https://api.realworld.io/images/demo-avatar.png",
	}

	response := types.UserResponse{
		User: user,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω: %s", user.Username)
}

// Put –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
func (u *User) Put(w http.ResponseWriter, r *http.Request) {
	log.Println("üìù PUT /api/user - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

	var updateRequest types.UserUpdateRequest

	// –ü–∞—Ä—Å–∏–º JSON –∏–∑ body –∑–∞–ø—Ä–æ—Å–∞
	if err := json.NewDecoder(r.Body).Decode(&updateRequest); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)

		errorResponse := types.ErrorResponse{
			Errors: map[string][]string{
				"body": {"can't be parsed"},
			},
		}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
	user := types.User{
		ID:       1,
		Email:    updateRequest.User.Email,
		Username: updateRequest.User.Username,
		Bio:      updateRequest.User.Bio,
		Image:    updateRequest.User.Image,
	}

	// –ï—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ, –∑–∞–ø–æ–ª–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if user.Email == "" {
		user.Email = "demo@realworld.io"
	}
	if user.Username == "" {
		user.Username = "demo"
	}
	if user.Bio == "" {
		user.Bio = "Updated demo user"
	}
	if user.Image == "" {
		user.Image = "https://api.realworld.io/images/demo-avatar.png"
	}

	response := types.UserResponse{
		User: user,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: %s", user.Username)
}
