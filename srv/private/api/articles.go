package api

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/tim2006/realworld/private/types"
)

type Articles struct {
}

func (a Articles) Routes(r chi.Router) {
	r.Get("/", a.List)
	r.Post("/", a.Create)
	r.Get("/{slug}", a.Get)
	r.Put("/{slug}", a.Update)
	r.Delete("/{slug}", a.Delete)
	r.Post("/{slug}/favorite", a.Favorite)
	r.Delete("/{slug}/favorite", a.Unfavorite)
	r.Get("/{slug}/comments", a.ListComments)
	r.Post("/{slug}/comments", a.CreateComment)
	r.Delete("/{slug}/comments/{id}", a.DeleteComment)
}

// List –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
func (a *Articles) List(w http.ResponseWriter, r *http.Request) {
	log.Println("üì• GET /api/articles - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π")

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
	articles := []types.Article{
		{
			ID:             1,
			Slug:           "how-to-train-your-dragon",
			Title:          "How to train your dragon",
			Description:    "Ever wonder how?",
			Body:           "Very carefully. This is a comprehensive guide...",
			CreatedAt:      time.Now().Add(-24 * time.Hour),
			UpdatedAt:      time.Now().Add(-24 * time.Hour),
			Favorited:      false,
			FavoritesCount: 5,
			Author: types.Author{
				Username:  "demo",
				Bio:       "Demo author",
				Image:     "https://api.realworld.io/images/demo-avatar.png",
				Following: false,
			},
			TagList: []string{"dragons", "training"},
		},
		{
			ID:             2,
			Slug:           "go-programming-basics",
			Title:          "Go Programming Basics",
			Description:    "Learn Go programming language",
			Body:           "Go is a great language for backend development...",
			CreatedAt:      time.Now().Add(-12 * time.Hour),
			UpdatedAt:      time.Now().Add(-12 * time.Hour),
			Favorited:      true,
			FavoritesCount: 12,
			Author: types.Author{
				Username:  "gopher",
				Bio:       "Go enthusiast",
				Image:     "https://api.realworld.io/images/gopher.png",
				Following: true,
			},
			TagList: []string{"golang", "programming"},
		},
	}

	response := types.ArticlesResponse{
		Articles:      articles,
		ArticlesCount: len(articles),
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ %d —Å—Ç–∞—Ç–µ–π", len(articles))
}

// Create —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
func (a *Articles) Create(w http.ResponseWriter, r *http.Request) {
	log.Println("üìù POST /api/articles - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏")

	var createRequest types.ArticleCreateRequest

	if err := json.NewDecoder(r.Body).Decode(&createRequest); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)

		errorResponse := types.ErrorResponse{
			Errors: map[string][]string{
				"body": {"can't be parsed"},
			},
		}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// –°–æ–∑–¥–∞–µ–º slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
	slug := strings.ToLower(strings.ReplaceAll(createRequest.Article.Title, " ", "-"))
	slug = strings.ReplaceAll(slug, "'", "")

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
	article := types.Article{
		ID:             3, // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∏–∑ –ë–î
		Slug:           slug,
		Title:          createRequest.Article.Title,
		Description:    createRequest.Article.Description,
		Body:           createRequest.Article.Body,
		CreatedAt:      time.Now(),
		UpdatedAt:      time.Now(),
		Favorited:      false,
		FavoritesCount: 0,
		Author: types.Author{
			Username:  "demo",
			Bio:       "Demo author",
			Image:     "https://api.realworld.io/images/demo-avatar.png",
			Following: false,
		},
		TagList: createRequest.Article.TagList,
	}

	response := types.ArticleResponse{
		Article: article,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: %s", article.Title)
}

// Get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—å—é –ø–æ slug
func (a *Articles) Get(w http.ResponseWriter, r *http.Request) {
	slug := chi.URLParam(r, "slug")
	log.Printf("üì• GET /api/articles/%s - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏", slug)

	// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è
	article := types.Article{
		ID:             1,
		Slug:           slug,
		Title:          "Article: " + slug,
		Description:    "Description for " + slug,
		Body:           "This is the body content for article: " + slug,
		CreatedAt:      time.Now().Add(-24 * time.Hour),
		UpdatedAt:      time.Now().Add(-12 * time.Hour),
		Favorited:      false,
		FavoritesCount: 7,
		Author: types.Author{
			Username:  "demo",
			Bio:       "Demo author",
			Image:     "https://api.realworld.io/images/demo-avatar.png",
			Following: false,
		},
		TagList: []string{"demo", "test"},
	}

	response := types.ArticleResponse{
		Article: article,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: %s", article.Title)
}

// Update –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å—é
func (a *Articles) Update(w http.ResponseWriter, r *http.Request) {
	slug := chi.URLParam(r, "slug")
	log.Printf("üìù PUT /api/articles/%s - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏", slug)

	var updateRequest types.ArticleCreateRequest

	if err := json.NewDecoder(r.Body).Decode(&updateRequest); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)

		errorResponse := types.ErrorResponse{
			Errors: map[string][]string{
				"body": {"can't be parsed"},
			},
		}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é
	article := types.Article{
		ID:             1,
		Slug:           slug,
		Title:          updateRequest.Article.Title,
		Description:    updateRequest.Article.Description,
		Body:           updateRequest.Article.Body,
		CreatedAt:      time.Now().Add(-24 * time.Hour),
		UpdatedAt:      time.Now(), // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
		Favorited:      false,
		FavoritesCount: 7,
		Author: types.Author{
			Username:  "demo",
			Bio:       "Demo author",
			Image:     "https://api.realworld.io/images/demo-avatar.png",
			Following: false,
		},
		TagList: updateRequest.Article.TagList,
	}

	response := types.ArticleResponse{
		Article: article,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: %s", article.Title)
}

// Delete —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ç—å—é
func (a *Articles) Delete(w http.ResponseWriter, r *http.Request) {
	slug := chi.URLParam(r, "slug")
	log.Printf("üóëÔ∏è DELETE /api/articles/%s - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏", slug)

	w.WriteHeader(http.StatusNoContent)
	log.Printf("‚úÖ –°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞: %s", slug)
}

// Favorite –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
func (a *Articles) Favorite(w http.ResponseWriter, r *http.Request) {
	slug := chi.URLParam(r, "slug")
	log.Printf("‚ù§Ô∏è POST /api/articles/%s/favorite - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", slug)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—å—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
	article := types.Article{
		ID:             1,
		Slug:           slug,
		Title:          "Article: " + slug,
		Description:    "Description for " + slug,
		Body:           "Body content for " + slug,
		CreatedAt:      time.Now().Add(-24 * time.Hour),
		UpdatedAt:      time.Now().Add(-12 * time.Hour),
		Favorited:      true, // –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
		FavoritesCount: 8,    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
		Author: types.Author{
			Username:  "demo",
			Bio:       "Demo author",
			Image:     "https://api.realworld.io/images/demo-avatar.png",
			Following: false,
		},
		TagList: []string{"demo", "test"},
	}

	response := types.ArticleResponse{
		Article: article,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	json.NewEncoder(w).Encode(response)
	log.Printf("‚úÖ –°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: %s", slug)
}

// Unfavorite —É–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç—å—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
func (a *Articles) Unfavorite(w http.ResponseWriter, r *http.Request) {
	slug := chi.URLParam(r, "slug")
	log.Printf("üíî DELETE /api/articles/%s/favorite - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", slug)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—å—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
	article := types.Article{
		ID:             1,
		Slug:           slug,
		Title:          "Article: " + slug,
		Description:    "Description for " + slug,
		Body:           "Body content for " + slug,
		CreatedAt:      time.Now().Add(-24 * time.Hour),
		UpdatedAt:      time.Now().Add(-12 * time.Hour),
		Favorited:      false, // –£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
		FavoritesCount: 6,     // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
		Author: types.Author{
			Username:  "demo",
			Bio:       "Demo author",
			Image:     "https://api.realworld.io/images/demo-avatar.png",
			Following: false,
		},
		TagList: []string{"demo", "test"},
	}

	response := types.ArticleResponse{
		Article: article,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	json.NewEncoder(w).Encode(response)
	log.Printf("‚úÖ –°—Ç–∞—Ç—å—è —É–±—Ä–∞–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: %s", slug)
}

// ListComments –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å–µ (–∑–∞–≥–ª—É—à–∫–∞)
func (a *Articles) ListComments(w http.ResponseWriter, r *http.Request) {
	slug := chi.URLParam(r, "slug")
	log.Printf("üí¨ GET /api/articles/%s/comments - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", slug)

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{"comments": []}`))
}

// CreateComment —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
func (a *Articles) CreateComment(w http.ResponseWriter, r *http.Request) {
	slug := chi.URLParam(r, "slug")
	log.Printf("üí¨ POST /api/articles/%s/comments - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", slug)

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	w.Write([]byte(`{"comment": {"id": 1, "body": "Test comment", "createdAt": "2025-10-02T12:00:00Z"}}`))
}

// DeleteComment —É–¥–∞–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
func (a *Articles) DeleteComment(w http.ResponseWriter, r *http.Request) {
	slug := chi.URLParam(r, "slug")
	id := chi.URLParam(r, "id")
	log.Printf("üóëÔ∏è DELETE /api/articles/%s/comments/%s - —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", slug, id)

	w.WriteHeader(http.StatusNoContent)
}
