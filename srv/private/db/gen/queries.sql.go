// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (slug, title, body) VALUES (?, ?, ?)
RETURNING id, slug, title, description, body, created_at, updated_at, favorites_count, author_id
`

type CreateArticleParams struct {
	Slug  string `json:"slug"`
	Title string `json:"title"`
	Body  string `json:"body"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg *CreateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle, arg.Slug, arg.Title, arg.Body)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FavoritesCount,
		&i.AuthorID,
	)
	return i, err
}

const getArticle = `-- name: GetArticle :one
SELECT id, slug, title, description, body, created_at, updated_at, favorites_count, author_id FROM articles WHERE slug = ?
`

func (q *Queries) GetArticle(ctx context.Context, slug string) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, slug)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FavoritesCount,
		&i.AuthorID,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, slug, title, description, body, created_at, updated_at, favorites_count, author_id FROM articles
`

func (q *Queries) ListArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, listArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Article{}
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FavoritesCount,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
