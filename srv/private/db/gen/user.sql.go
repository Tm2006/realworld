// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, password)
VALUES (?, ?, ?)
RETURNING id, email, username, password, bio, image
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Bio,
		&i.Image,
	)
	return i, err
}

const followUser = `-- name: FollowUser :exec
INSERT INTO follows (follower_id, followee_id)
SELECT ?, id FROM users WHERE username = ?
`

type FollowUserParams struct {
	FollowerID sql.NullInt64 `json:"follower_id"`
	Username   string        `json:"username"`
}

func (q *Queries) FollowUser(ctx context.Context, arg *FollowUserParams) error {
	_, err := q.db.ExecContext(ctx, followUser, arg.FollowerID, arg.Username)
	return err
}

const getUser = `-- name: GetUser :one

SELECT email, bio, image, username
FROM users
WHERE id = ?
`

type GetUserRow struct {
	Email    string         `json:"email"`
	Bio      sql.NullString `json:"bio"`
	Image    sql.NullString `json:"image"`
	Username string         `json:"username"`
}

// user.sql
func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.Email,
		&i.Bio,
		&i.Image,
		&i.Username,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password, bio, image
FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Bio,
		&i.Image,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT
    u.username,
    u.bio,
    u.image,
    CASE WHEN f.follower_id IS NOT NULL THEN 1 ELSE 0 END AS is_following
FROM users u
LEFT JOIN follows f ON u.id = f.followee_id AND f.follower_id = ?
WHERE u.username = ?
`

type GetUserProfileParams struct {
	FollowerID sql.NullInt64 `json:"follower_id"`
	Username   string        `json:"username"`
}

type GetUserProfileRow struct {
	Username    string         `json:"username"`
	Bio         sql.NullString `json:"bio"`
	Image       sql.NullString `json:"image"`
	IsFollowing int64          `json:"is_following"`
}

func (q *Queries) GetUserProfile(ctx context.Context, arg *GetUserProfileParams) (GetUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, arg.FollowerID, arg.Username)
	var i GetUserProfileRow
	err := row.Scan(
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.IsFollowing,
	)
	return i, err
}

const getUserProfileById = `-- name: GetUserProfileById :one
SELECT
    u.username,
    u.bio,
    u.image,
    CASE WHEN f.follower_id IS NOT NULL THEN 1 ELSE 0 END AS is_following
FROM users u
LEFT JOIN follows f ON u.id = f.followee_id AND f.follower_id = ?
WHERE u.id = ?
`

type GetUserProfileByIdParams struct {
	FollowerID sql.NullInt64 `json:"follower_id"`
	ID         int64         `json:"id"`
}

type GetUserProfileByIdRow struct {
	Username    string         `json:"username"`
	Bio         sql.NullString `json:"bio"`
	Image       sql.NullString `json:"image"`
	IsFollowing int64          `json:"is_following"`
}

func (q *Queries) GetUserProfileById(ctx context.Context, arg *GetUserProfileByIdParams) (GetUserProfileByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileById, arg.FollowerID, arg.ID)
	var i GetUserProfileByIdRow
	err := row.Scan(
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.IsFollowing,
	)
	return i, err
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM follows
WHERE follower_id = ?
  AND followee_id = (SELECT id FROM users WHERE username = ?)
`

type UnfollowUserParams struct {
	FollowerID sql.NullInt64 `json:"follower_id"`
	Username   string        `json:"username"`
}

func (q *Queries) UnfollowUser(ctx context.Context, arg *UnfollowUserParams) error {
	_, err := q.db.ExecContext(ctx, unfollowUser, arg.FollowerID, arg.Username)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email    = ?,
    username = ?,
    password = ?,
    image    = ?,
    bio      = ?
WHERE id = ?
RETURNING email, bio, image, username
`

type UpdateUserParams struct {
	Email    string         `json:"email"`
	Username string         `json:"username"`
	Password string         `json:"password"`
	Image    sql.NullString `json:"image"`
	Bio      sql.NullString `json:"bio"`
	ID       int64          `json:"id"`
}

type UpdateUserRow struct {
	Email    string         `json:"email"`
	Bio      sql.NullString `json:"bio"`
	Image    sql.NullString `json:"image"`
	Username string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.Image,
		arg.Bio,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.Email,
		&i.Bio,
		&i.Image,
		&i.Username,
	)
	return i, err
}
