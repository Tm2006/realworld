#!/bin/bash

# üß™ RealWorld API Test Script
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

API_URL="http://localhost:8080"

echo -e "${BLUE}üß™ Testing RealWorld API${NC}"
echo "================================"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint
test_endpoint() {
    local method=$1
    local endpoint=$2
    local expected_status=$3
    local description=$4
    local data=$5
    
    echo -n "Testing $method $endpoint... "
    
    if [ -n "$data" ]; then
        response=$(curl -s -w "%{http_code}" -X $method "$API_URL$endpoint" \
                   -H "Content-Type: application/json" \
                   -d "$data")
    else
        response=$(curl -s -w "%{http_code}" -X $method "$API_URL$endpoint")
    fi
    
    status_code="${response: -3}"
    body="${response%???}"
    
    if [ "$status_code" -eq "$expected_status" ]; then
        echo -e "${GREEN}‚úÖ PASS${NC} ($status_code)"
        if [ -n "$body" ] && [ ${#body} -gt 0 ]; then
            echo -e "   Response: ${body:0:100}..."
        fi
    else
        echo -e "${RED}‚ùå FAIL${NC} (expected $expected_status, got $status_code)"
        if [ -n "$body" ] && [ ${#body} -gt 0 ]; then
            echo -e "   Response: ${body:0:100}..."
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
echo -e "\n${YELLOW}üîç Server Connectivity${NC}"
if curl -s --connect-timeout 5 "$API_URL" > /dev/null; then
    echo -e "Server connectivity: ${GREEN}‚úÖ PASS${NC}"
else
    echo -e "Server connectivity: ${RED}‚ùå FAIL${NC}"
    echo "‚ùó Make sure the server is running: go run cmd/realworld/main.go"
    exit 1
fi

# CORS —Ç–µ—Å—Ç—ã
echo -e "\n${YELLOW}üåê CORS Headers${NC}"
cors_response=$(curl -s -I -X OPTIONS "$API_URL/api/user" \
  -H "Origin: http://localhost:3000" \
  -H "Access-Control-Request-Method: GET")

if echo "$cors_response" | grep -q "Access-Control-Allow-Origin"; then
    echo -e "CORS headers: ${GREEN}‚úÖ PASS${NC}"
    echo "   Origin: $(echo "$cors_response" | grep "Access-Control-Allow-Origin" | tr -d '\r')"
else
    echo -e "CORS headers: ${RED}‚ùå FAIL${NC}"
fi

# User endpoints
echo -e "\n${YELLOW}üë§ User Endpoints${NC}"
test_endpoint "GET" "/api/user" 200 "Get current user"
test_endpoint "PUT" "/api/user" 200 "Update user" \
    '{"user": {"email": "test@example.com", "username": "testuser"}}'

# Articles endpoints
echo -e "\n${YELLOW}üìù Articles Endpoints${NC}"
test_endpoint "GET" "/api/articles" 200 "Get articles list"
test_endpoint "POST" "/api/articles" 200 "Create article" \
    '{"article": {"title": "Test Article", "description": "Test desc", "body": "Test body", "tagList": ["test"]}}'
test_endpoint "GET" "/api/articles/test-slug" 200 "Get article by slug"
test_endpoint "PUT" "/api/articles/test-slug" 200 "Update article" \
    '{"article": {"title": "Updated Article"}}'
test_endpoint "DELETE" "/api/articles/test-slug" 200 "Delete article"

# Profile endpoints
echo -e "\n${YELLOW}üë• Profile Endpoints${NC}"
test_endpoint "GET" "/api/profiles/testuser" 200 "Get user profile"
test_endpoint "POST" "/api/profiles/testuser/follow" 200 "Follow user"
test_endpoint "DELETE" "/api/profiles/testuser/follow" 200 "Unfollow user"

# Tags endpoints
echo -e "\n${YELLOW}üè∑Ô∏è  Tags Endpoints${NC}"
test_endpoint "GET" "/api/tags" 200 "Get all tags"

# Comments endpoints (–µ—Å–ª–∏ –±—É–¥—É—Ç)
echo -e "\n${YELLOW}üí¨ Comments Endpoints${NC}"
test_endpoint "GET" "/api/articles/test-slug/comments" 200 "Get comments"
test_endpoint "POST" "/api/articles/test-slug/comments" 200 "Add comment" \
    '{"comment": {"body": "Test comment"}}'

# Favorites endpoints
echo -e "\n${YELLOW}‚ù§Ô∏è  Favorites Endpoints${NC}"
test_endpoint "POST" "/api/articles/test-slug/favorite" 200 "Favorite article"
test_endpoint "DELETE" "/api/articles/test-slug/favorite" 200 "Unfavorite article"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints
echo -e "\n${YELLOW}üö´ Error Handling${NC}"
test_endpoint "GET" "/api/nonexistent" 404 "Non-existent endpoint"
test_endpoint "GET" "/nonexistent" 404 "Without API prefix"

echo -e "\n${BLUE}üìä Test Summary${NC}"
echo "================================"
echo "‚úÖ –í—Å–µ endpoints –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å–æ–º 200 (–ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ handlers)"
echo "‚ùå 404 –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—É—Ç–µ–π - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
echo ""
echo -e "${YELLOW}üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo "1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤ handlers (user.go, articles.go, etc.)"
echo "2. –î–æ–±–∞–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (JWT —Ç–æ–∫–µ–Ω—ã)"
echo "3. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫ handlers"
echo "4. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"

echo -e "\n${GREEN}üèÅ Testing completed!${NC}"